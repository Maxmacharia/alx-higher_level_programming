'''How to use 0-add_integer.py

This module defines an integer addition function '''add_integer(a, b=98)'''
The second argument is optional. It is provided by default.
a and b have been casted to integers if they are float

'''add_integer(...)''' returns the addition of its two arguments'''

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(100, -2)
98
>>> add_integer(2)
100
>>> add_integer(100.3, -2)
98

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(4, "School")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer("Hello", 6)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::
